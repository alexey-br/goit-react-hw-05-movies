{"version":3,"file":"static/js/417.eaf6330c.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/reusableComponents/InfoTag/InfoTag.js","services/themoviedb-API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 24px;\n`;\n","import { InfoTag } from 'components/reusableComponents/InfoTag/InfoTag';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/themoviedb-API';\nimport { CastList } from './Cast.styled';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n\n  const { id: movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    API.getMovieCast(movieId, controller)\n      .then(setCast)\n      .catch(error => console.log('get movie cast error - ', error));\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {cast.map(({ id, name, character, fotoURL }) => {\n        return (\n          <li key={id}>\n            <img src={fotoURL} alt={`${name} foto`} />\n            <p>\n              <InfoTag>Name: </InfoTag>\n              {name}\n            </p>\n            <p>\n              <InfoTag>Character: </InfoTag>\n              {character}\n            </p>\n          </li>\n        );\n      })}\n    </CastList>\n  );\n}\n","import styled from 'styled-components';\n\nexport const InfoTag = styled.span`\n  font-weight: ${({ theme }) => theme.fontWeights.heading};\n`;\n","import axios from 'axios';\nimport noPhoto from '../images/no-photo.jpg';\n\nconst KEY = 'e8f4d647cde955cba1306001955cfd97';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: KEY,\n};\n\nexport const getTrendingMovies = async controller => {\n  const response = await axios.get('/trending/movie/week', {\n    params: params,\n    signal: controller.signal,\n  });\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const fetchMovies = async (query, controller) => {\n  const searchParams = { ...params, query: query };\n\n  const response = await axios.get('/search/movie', {\n    params: searchParams,\n    signal: controller.signal,\n  });\n\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const getMovieInfo = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeMovieInfo(response.data);\n};\n\nexport const getMovieCast = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeCastData(response.data.cast);\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, { params: params });\n\n  return normalizeReviewsData(response.data.results);\n};\n\nexport const normalizeMoviesData = data =>\n  data.map(({ id, title }) => ({ id, title }));\n\nexport const normalizeMovieInfo = movieInfo => {\n  const { poster_path, title, release_date, vote_average, genres, overview } =\n    movieInfo;\n\n  const genresList = genres.map(({ name }) => name).join(', ');\n  const userScore = Math.floor(vote_average * 10);\n  const releaseYear = parseInt(release_date);\n  const posterUrl = poster_path ? IMAGE_BASE_URL + poster_path : noPhoto;\n\n  return {\n    posterUrl,\n    title,\n    releaseYear,\n    userScore,\n    genresList,\n    overview,\n  };\n};\n\nexport const normalizeCastData = data => {\n  return data.map(({ id, name, character, profile_path }) => {\n    const fotoURL = profile_path ? IMAGE_BASE_URL + profile_path : noPhoto;\n    return { id, name, character, fotoURL };\n  });\n};\n\nexport const normalizeReviewsData = data => {\n  return data.map(({ id, author, content }) => ({ id, author, content }));\n};\n"],"names":["CastList","styled","Cast","useState","cast","setCast","movieId","useParams","id","useEffect","controller","AbortController","API","then","catch","error","console","log","abort","map","name","character","fotoURL","src","alt","InfoTag","theme","fontWeights","heading","IMAGE_BASE_URL","axios","params","api_key","getTrendingMovies","signal","response","normalizeMoviesData","data","results","fetchMovies","query","searchParams","getMovieInfo","normalizeMovieInfo","getMovieCast","normalizeCastData","getMovieReviews","normalizeReviewsData","title","movieInfo","poster_path","release_date","vote_average","genres","overview","genresList","join","userScore","Math","floor","releaseYear","parseInt","posterUrl","noPhoto","profile_path","author","content"],"sourceRoot":""}