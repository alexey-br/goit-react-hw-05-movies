{"version":3,"file":"static/js/538.7a6e3010.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/reusableComponents/Button/Button.js","components/reusableComponents/Section/Section.js","components/reusableComponents/Input/Input.js","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx","services/themoviedb-API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const ListItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 6px;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  color: inherit;\n\n  transition: color, 250ms;\n\n  :hover {\n    color: ${({ theme }) => theme.colors.secondary};\n  }\n`;\n","/** @jsxImportSource theme-ui */\nimport PropTypes from 'prop-types';\nimport { ListItem, MovieLink } from './MoviesList.styled';\n\nexport default function MoviesList({ moviesData, location }) {\n  return (\n    <ul sx={{ mt: 3 }}>\n      {moviesData.map(({ id, title }) => (\n        <ListItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </MovieLink>\n        </ListItem>\n      ))}\n    </ul>\n  );\n}\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 8px 16px;\n  font-size: ${({ theme }) => theme.fontSizes[2]}px;\n  display: inline-block;\n  border: 1px solid ${({ theme }) => theme.colors.gray};\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  color: ${({ theme }) => theme.colors.background};\n  font-weight: ${({ theme }) => theme.fontWeights.heading};\n  cursor: pointer;\n\n  transition: transform 200ms;\n\n  :active {\n    transform: translateY(2px);\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 32px;\n`;\n","import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const Input = styled(Field)`\n  margin-right: 8px;\n  padding: 8px;\n  border-radius: 4px;\n  color: inherit;\n  font-size: ${({ theme }) => theme.fontSizes[2]}px;\n  border-width: 1px;\n  border-color: ${({ theme }) => theme.colors.gray};\n  outline: none;\n\n  transition: all 250ms;\n\n  :focus {\n    border-color: ${({ theme }) => theme.colors.secondary};\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.secondary};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Formik, Form } from 'formik';\nimport { Input } from 'components/reusableComponents/Input/Input';\nimport { Button } from 'components/reusableComponents/Button/Button';\n\nexport default function SearchBox({ onSearch, query }) {\n  return (\n    <Formik\n      initialValues={{ query: query }}\n      onSubmit={(values, _) => onSearch(values.query.trim())}\n    >\n      <Form>\n        <Input\n          name=\"query\"\n          autoComplete=\"off\"\n          type=\"text\"\n          placeholder=\"Search movies\"\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </Formik>\n  );\n}\n\nSearchBox.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport * as API from '../../services/themoviedb-API';\nimport MoviesList from 'components/MoviesList';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Section } from 'components/reusableComponents/Section/Section';\nimport SearchBox from 'components/SearchBox';\n\nexport default function Movies() {\n  const [moviesData, setMoviesData] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') return;\n\n    const controller = new AbortController();\n\n    API.fetchMovies(query, controller)\n      .then(setMoviesData)\n      .catch(error => console.log('search movies error - ', error));\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  const onSearch = text => setSearchParams(text !== '' ? { query: text } : {});\n\n  return (\n    <Section>\n      <SearchBox onSearch={onSearch} query={query} />\n      {moviesData.length > 0 && (\n        <MoviesList moviesData={moviesData} location={location} />\n      )}\n    </Section>\n  );\n}\n","import axios from 'axios';\nimport noPhoto from '../images/no-photo.jpg';\n\nconst KEY = 'e8f4d647cde955cba1306001955cfd97';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: KEY,\n};\n\nexport const getTrendingMovies = async controller => {\n  const response = await axios.get('/trending/movie/week', {\n    params: params,\n    signal: controller.signal,\n  });\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const fetchMovies = async (query, controller) => {\n  const searchParams = { ...params, query: query };\n\n  const response = await axios.get('/search/movie', {\n    params: searchParams,\n    signal: controller.signal,\n  });\n\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const getMovieInfo = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeMovieInfo(response.data);\n};\n\nexport const getMovieCast = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeCastData(response.data.cast);\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, { params: params });\n\n  return normalizeReviewsData(response.data.results);\n};\n\nexport const normalizeMoviesData = data =>\n  data.map(({ id, title }) => ({ id, title }));\n\nexport const normalizeMovieInfo = movieInfo => {\n  const { poster_path, title, release_date, vote_average, genres, overview } =\n    movieInfo;\n\n  const genresList = genres.map(({ name }) => name).join(', ');\n  const userScore = Math.floor(vote_average * 10);\n  const releaseYear = parseInt(release_date);\n  const posterUrl = poster_path ? IMAGE_BASE_URL + poster_path : noPhoto;\n\n  return {\n    posterUrl,\n    title,\n    releaseYear,\n    userScore,\n    genresList,\n    overview,\n  };\n};\n\nexport const normalizeCastData = data => {\n  return data.map(({ id, name, character, profile_path }) => {\n    const fotoURL = profile_path ? IMAGE_BASE_URL + profile_path : noPhoto;\n    return { id, name, character, fotoURL };\n  });\n};\n\nexport const normalizeReviewsData = data => {\n  return data.map(({ id, author, content }) => ({ id, author, content }));\n};\n"],"names":["ListItem","styled","MovieLink","Link","theme","colors","secondary","MoviesList","moviesData","location","sx","mt","map","id","title","to","state","from","Button","fontSizes","gray","background","fontWeights","heading","Section","Input","Field","SearchBox","onSearch","query","initialValues","onSubmit","values","_","trim","name","autoComplete","type","placeholder","Movies","useState","setMoviesData","useSearchParams","searchParams","setSearchParams","get","useLocation","useEffect","controller","AbortController","API","then","catch","error","console","log","abort","text","length","IMAGE_BASE_URL","axios","params","api_key","getTrendingMovies","signal","response","normalizeMoviesData","data","results","fetchMovies","getMovieInfo","normalizeMovieInfo","getMovieCast","normalizeCastData","cast","getMovieReviews","normalizeReviewsData","movieInfo","poster_path","release_date","vote_average","genres","overview","genresList","join","userScore","Math","floor","releaseYear","parseInt","posterUrl","noPhoto","character","profile_path","fotoURL","author","content"],"sourceRoot":""}