{"version":3,"file":"static/js/122.2908e8c3.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","components/reusableComponents/InfoTag/InfoTag.js","components/reusableComponents/InfoText/InfoText.js","services/themoviedb-API.js"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport { InfoTag } from 'components/reusableComponents/InfoTag/InfoTag';\nimport { InfoText } from 'components/reusableComponents/InfoText/InfoText';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/themoviedb-API';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n\n  const { id: movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    API.getMovieReviews(movieId, controller)\n      .then(setReviews)\n      .catch(error => console.log('get movie reviews error - ', error));\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length ? (\n        <ul sx={{ maxWidth: 1200 }}>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <p sx={{ mb: 2 }}>\n                  <InfoTag>Author: </InfoTag> {author}\n                </p>\n                <InfoText>{content}</InfoText>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const InfoTag = styled.span`\n  font-weight: ${({ theme }) => theme.fontWeights.heading};\n`;\n","import styled from 'styled-components';\n\nexport const InfoText = styled.p`\n  margin-bottom: 16px;\n`;\n","import axios from 'axios';\nimport noPhoto from '../images/no-photo.jpg';\n\nconst KEY = 'e8f4d647cde955cba1306001955cfd97';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: KEY,\n};\n\nexport const getTrendingMovies = async controller => {\n  const response = await axios.get('/trending/movie/week', {\n    params: params,\n    signal: controller.signal,\n  });\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const fetchMovies = async (query, controller) => {\n  const searchParams = { ...params, query: query };\n\n  const response = await axios.get('/search/movie', {\n    params: searchParams,\n    signal: controller.signal,\n  });\n\n  return normalizeMoviesData(response.data.results);\n};\n\nexport const getMovieInfo = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeMovieInfo(response.data);\n};\n\nexport const getMovieCast = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: params,\n    signal: controller.signal,\n  });\n\n  return normalizeCastData(response.data.cast);\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, { params: params });\n\n  return normalizeReviewsData(response.data.results);\n};\n\nexport const normalizeMoviesData = data =>\n  data.map(({ id, title }) => ({ id, title }));\n\nexport const normalizeMovieInfo = movieInfo => {\n  const { poster_path, title, release_date, vote_average, genres, overview } =\n    movieInfo;\n\n  const genresList = genres.map(({ name }) => name).join(', ');\n  const userScore = Math.floor(vote_average * 10);\n  const releaseYear = parseInt(release_date);\n  const posterUrl = poster_path ? IMAGE_BASE_URL + poster_path : noPhoto;\n\n  return {\n    posterUrl,\n    title,\n    releaseYear,\n    userScore,\n    genresList,\n    overview,\n  };\n};\n\nexport const normalizeCastData = data => {\n  return data.map(({ id, name, character, profile_path }) => {\n    const fotoURL = profile_path ? IMAGE_BASE_URL + profile_path : noPhoto;\n    return { id, name, character, fotoURL };\n  });\n};\n\nexport const normalizeReviewsData = data => {\n  return data.map(({ id, author, content }) => ({ id, author, content }));\n};\n"],"names":["Reviews","useState","reviews","setReviews","movieId","useParams","id","useEffect","controller","AbortController","API","then","catch","error","console","log","abort","length","sx","maxWidth","map","author","content","mb","InfoTag","InfoText","styled","theme","fontWeights","heading","IMAGE_BASE_URL","axios","params","api_key","getTrendingMovies","signal","response","normalizeMoviesData","data","results","fetchMovies","query","searchParams","getMovieInfo","normalizeMovieInfo","getMovieCast","normalizeCastData","cast","getMovieReviews","normalizeReviewsData","title","movieInfo","poster_path","release_date","vote_average","genres","overview","genresList","name","join","userScore","Math","floor","releaseYear","parseInt","posterUrl","noPhoto","character","profile_path","fotoURL"],"sourceRoot":""}